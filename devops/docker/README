-------------------------------------------------------------------------------
 ____          _             _     
|    \ ___ ___| |_ ___ ___  |_|___ 
|  |  | . |  _| '_| -_|  _|_| | . |
|____/|___|___|_,_|___|_| |_|_|___|
                                   
 #docker.io
-------------------------------------------------------------------------------
| COMMANDS                                                                    |
-------------------------------------------------------------------------------
docker [OPTIONS] COMMAND [arg...]
 -H=[unix:///var/run/docker.sock]: tcp://host:port to bind/connect to or unix://path/to/socket to use
A self-sufficient runtime for linux containers.
Commands:
    attach    Attach to a running container
    build     Build an image from a Dockerfile
    commit    Create a new image from a container's changes
    cp        Copy files/folders from the containers filesystem to the host path
    diff      Inspect changes on a container's filesystem
    events    Get real time events from the server
    export    Stream the contents of a container as a tar archive
    history   Show the history of an image
    images    List images
    import    Create a new filesystem image from the contents of a tarball
    info      Display system-wide information
    inspect   Return low-level information on a container
    kill      Kill a running container
    load      Load an image from a tar archive
    login     Register or Login to the docker registry server
    logs      Fetch the logs of a container
    port      Lookup the public-facing port which is NAT-ed to PRIVATE_PORT
    pause     Pause all processes within a container
    ps        List containers
    pull      Pull an image or a repository from the docker registry server
    push      Push an image or a repository to the docker registry server
    restart   Restart a running container
    rm        Remove one or more containers
    rmi       Remove one or more images
    run       Run a command in a new container
    save      Save an image to a tar archive
    search    Search for an image in the docker index
    start     Start a stopped container
    stop      Stop a running container
    tag       Tag an image into a repository
    top       Lookup the running processes of a container
    unpause   Unpause a paused container
    version   Show the docker version information
    wait      Block until a container stops, then print its exit code
-------------------------------------------------------------------------------
| INSTALL                                                                     |
-------------------------------------------------------------------------------
sudo apt-get install docker.io
sudo docker -d &
-------------------------------------------------------------------------------
| USAGE                                                                       |
-------------------------------------------------------------------------------
sudo docker info
sudo docker version
sudo docker images
sudo docker search ubuntu
sudo docker pull ubuntu
sudo docker pull ubuntu:utopic
sudo docker pull sequenceiq/hadoop-docker
sudo docker pull sequenceiq/spark
sudo docker run <image-name> <command-to-run>
sudo docker run <image-name> -bash
sudo docker run -i -t aosio/ubuntu:utopic /bin/bash
sudo docker run -i -t aosio/sinatra /bin/bash
sudo docker run -p 50070:50070 -i -t sequenceiq/hadoop-docker /etc/bootstrap.sh -bash
sudo docker run -i -t -h sandbox sequenceiq/spark /etc/bootstrap.sh -bash
sudo docker inspect <container-id>
sudo docker ps
sudo docker logs <container-id>
sudo docker build -t aosio/memcached .
---
sudo docker run -ti ubuntu:14.04 /bin/bash -c 'ls'
sudo docker run -ti ubuntu:14.04 /bin/bash -c 'useradd -u 12345 -s /bin/bash eric; su - eric'
---
sudo docker build -t aosio/ssh:utopic .
sudo docker run  -p 222:22 -i -t aosio/ssh:utopic /bin/bash
ssh root@localhost -p 222
sudo docker run -d -P --name ssh aosio/ssh:utopic
sudo docker port ssh 22
ssh root@localhost -p <port>
sudo docker stop ssh
sudo docker rm ssh
---
sudo docker build -t sequenceiq/hadoop-docker:2.5.0 .
sudo docker commit 8dbd9e392a96 my_img
sudo docker tag 5db5f8471261 sinatra
sudo docker inspect --format="{{.NetworkSettings.IPAddress}}" 934df0238dd3
sudo docker login
-------------------------------------------------------------------------------
| IMAGES                                                                      |
-------------------------------------------------------------------------------
ubuntu-image
+ https://github.com/tianon/docker-brew-ubuntu-core.git
-------------------------------------------------------------------------------
hadoop-image
sudo docker run -d -P --name="Hadoop" -h "hadoop" ruo91/hadoop:2.4.1
ssh `docker inspect -f '{{ .NetworkSettings.IPAddress }}' Hadoop`
start-all.sh
jps
for((i=0; i<10; i++)) do echo ${i}; done > test.log
hdfs dfs -copyFromLocal test.log /
hdfs dfs -ls /
exit
sudo docker port Hadoop 50070
------------------------------------------------------------------------------
ambari-image
+ sudo docker run -d -p 8080 -h amb0.mycorp.kom --name ambari-singlenode sequenceiq/ambari --tag ambari-server=true
-------------------------------------------------------------------------------
| API                                                                         |
-------------------------------------------------------------------------------
java-api
+ https://github.com/jboss-fuse/fuse-docker
-------------------------------------------------------------------------------
| ORCHESTRATION                                                               |
-------------------------------------------------------------------------------
+ flynn https://flynn.io
+ deis http://deis.io
+ coreos http://coreos.com
+ Mesos http://mesosphere.io/2013/09/26/docker-on-mesos
+ maestro https://github.com/toscanini/maestro
+ Docker Openstack https://wiki.openstack.org/wiki/Docker
+ Paas zone within OpenStack http://www.sebastien-han.fr/blog/2013/10/31/build-a-paas-zone-within-your-openstack-cloud
+ shipyard http://shipyard-project.com
+ http://www.infoq.com/news/2013/12/futureops
+ http://www.slideshare.net/profyclub_ru/8-mitchell-hashimoto-hashicorp
+ Decentralizing Docker: How to use serf with Docker http://blog.ctl-c.io/?p=43
+ http://mesosphere.io/learn/run-docker-on-mesosphere
+ https://github.com/mesosphere/deimos
+ https://github.com/mesosphere/marathon
+ http://www.tsuru.io
+ https://github.com/tsuru/docker-cluster
+ http://docs.tsuru.io/en/latest/provisioners/docker/schedulers.html
+ http://blog.tsuru.io/2014/04/04/running-tsuru-in-production-scaling-and-segregating-docker-containers
+ maestro-ng https://github.com/signalfuse/maestro-ng
+ decking http://decking.io
+ kubernetes https://github.com/GoogleCloudPlatform/kubernetes
+ projectatomic http://www.projectatomic.io
+ geard http://openshift.github.io/geard
-------------------------------------------------------------------------------

